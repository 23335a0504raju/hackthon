# -*- coding: utf-8 -*-
"""PipeLine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qNQlkgbViSBNDLkkBXt7iJXumGXkBW0s
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load your dataset
data = pd.read_csv('/content/glucose_monitoring_data1.csv')

# Handle missing data (if any)
y=data['Gender']
data.loc[y=='Female','Menstrual Cycle (Day)']=np.random.choice(["Yes", "No"])
data.loc[y=='Male','Menstrual Cycle (Day)']="no"  # You can choose other strategies
y=data['Exercise Intensity']
data.loc[y=='High','Exercise Intensity']="0"
data.loc[y=='Low','Exercise Intensity']="2"
data.loc[y=='Moderate','Exercise Intensity']="1"

# Define feature columns and target
X = data[['Age', 'Weight (kg)', 'Height (cm)', 'Gender', 'Diabetes Type',
          'Carb Intake (g)', 'Carb Time', 'Exercise Intensity',
          'Exercise Duration (min)', 'Exercise Time', 'Sleep Duration (hours)',
          'Sleep Quality', 'Insulin Dose (units)', 'Stress Level (1-10)',
          'Menstrual Cycle (Day)']]

y = data['Glucose Level (mg/dL)']

# Preprocessing: Handle categorical and numerical data
categorical_features = ['Gender', 'Diabetes Type', 'Sleep Quality', 'Menstrual Cycle (Day)']
numeric_features = ['Age', 'Weight (kg)', 'Height (cm)', 'Carb Intake (g)',
                    'Exercise Intensity', 'Exercise Duration (min)',
                    'Sleep Duration (hours)', 'Insulin Dose (units)', 'Stress Level (1-10)']
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(), categorical_features)])

# Create the model pipeline

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', RandomForestRegressor())])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.model_selection import GridSearchCV

# Hyperparameter grid for Random Forest
param_grid = {
    'regressor__n_estimators': [100, 300, 500],
    'regressor__max_depth': [10, 20, 30],
    'regressor__min_samples_split': [2, 5, 10],
    'regressor__min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(model, param_grid, cv=3, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

# Get the best parameters and retrain the model
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")

# Fit model with the best hyperparameters
model = grid_search.best_estimator_

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
from sklearn.metrics import r2_score

# R² for Simple RNN
y_pred_rnn = model.predict(X_test)
r2_rnn = r2_score(y_test, y_pred_rnn)
# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load your dataset
data = pd.read_csv('/content/glucose_monitoring_data1.csv')

# Handle missing data (if any)
y=data['Gender']
data.loc[y=='Female','Menstrual Cycle (Day)']=np.random.choice(["Yes", "No"])
data.loc[y=='Male','Menstrual Cycle (Day)']="no"  # You can choose other strategies
y=data['Exercise Intensity']
data.loc[y=='High','Exercise Intensity']="0"
data.loc[y=='Low','Exercise Intensity']="2"
data.loc[y=='Moderate','Exercise Intensity']="1"

# Define feature columns and target
X = data[['Age', 'Weight (kg)', 'Height (cm)', 'Gender', 'Diabetes Type',
          'Carb Intake (g)', 'Carb Time', 'Exercise Intensity',
          'Exercise Duration (min)', 'Exercise Time', 'Sleep Duration (hours)',
          'Sleep Quality', 'Insulin Dose (units)', 'Stress Level (1-10)',
          'Menstrual Cycle (Day)']]

y = data['Glucose Level (mg/dL)']

# Preprocessing: Handle categorical and numerical data
categorical_features = ['Gender', 'Diabetes Type', 'Sleep Quality', 'Menstrual Cycle (Day)']
numeric_features = ['Age', 'Weight (kg)', 'Height (cm)', 'Carb Intake (g)',
                    'Exercise Intensity', 'Exercise Duration (min)',
                    'Sleep Duration (hours)', 'Insulin Dose (units)', 'Stress Level (1-10)']
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(), categorical_features)])

# Create the model pipeline

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', RandomForestRegressor())])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.model_selection import GridSearchCV

# Hyperparameter grid for Random Forest
param_grid = {
    'regressor__n_estimators': [100, 300, 500],
    'regressor__max_depth': [10, 20, 30],
    'regressor__min_samples_split': [2, 5, 10],
    'regressor__min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(model, param_grid, cv=3, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

# Get the best parameters and retrain the model
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")

# Fit model with the best hyperparameters
model = grid_search.best_estimator_

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
from sklearn.metrics import r2_score

# R² for Simple RNN
y_pred_rnn = model.predict(X_test)
r2_rnn = r2_score(y_test, y_pred_rnn)
print(f"R² Score (Simple RNN): {r2_rnn}")
import joblib
# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Load your dataset
data = pd.read_csv('/content/glucose_monitoring_data1.csv')

# Handle missing data (if any)
y = data['Gender']
data.loc[y == 'Female', 'Menstrual Cycle (Day)'] = np.random.choice(["Yes", "No"])
data.loc[y == 'Male', 'Menstrual Cycle (Day)'] = "no"  # You can choose other strategies
y = data['Exercise Intensity']
data.loc[y == 'High', 'Exercise Intensity'] = "0"
data.loc[y == 'Low', 'Exercise Intensity'] = "2"
data.loc[y == 'Moderate', 'Exercise Intensity'] = "1"

# Define feature columns and target
X = data[['Age', 'Weight (kg)', 'Height (cm)', 'Gender', 'Diabetes Type',
          'Carb Intake (g)', 'Carb Time', 'Exercise Intensity',
          'Exercise Duration (min)', 'Exercise Time', 'Sleep Duration (hours)',
          'Sleep Quality', 'Insulin Dose (units)', 'Stress Level (1-10)',
          'Menstrual Cycle (Day)']]

y = data['Glucose Level (mg/dL)']

# Preprocessing: Handle categorical and numerical data
categorical_features = ['Gender', 'Diabetes Type', 'Sleep Quality', 'Menstrual Cycle (Day)']
numeric_features = ['Age', 'Weight (kg)', 'Height (cm)', 'Carb Intake (g)',
                    'Exercise Intensity', 'Exercise Duration (min)',
                    'Sleep Duration (hours)', 'Insulin Dose (units)', 'Stress Level (1-10)']
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_features),
        ('cat', OneHotEncoder(), categorical_features)])

# Create the model pipeline

model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('regressor', RandomForestRegressor())])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.model_selection import GridSearchCV

# Hyperparameter grid for Random Forest
param_grid = {
    'regressor__n_estimators': [100, 300, 500],
    'regressor__max_depth': [10, 20, 30],
    'regressor__min_samples_split': [2, 5, 10],
    'regressor__min_samples_leaf': [1, 2, 4]
}

grid_search = GridSearchCV(model, param_grid, cv=3, scoring='neg_mean_squared_error')
grid_search.fit(X_train, y_train)

# Get the best parameters and retrain the model
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")

# Fit model with the best hyperparameters
model = grid_search.best_estimator_

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")
from sklearn.metrics import r2_score

# R² for Simple RNN
y_pred_rnn = model.predict(X_test)
r2_rnn = r2_score(y_test, y_pred_rnn)
print(f"R² Score (Simple RNN): {r2_rnn}")